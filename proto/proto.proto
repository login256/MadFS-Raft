syntax = "proto3";

package proto;

message Void {
}

enum Consistency {
    STRONG = 0;
    RELAXED_READS = 1;
}

message Query {
    string sql = 1;
    Consistency consistency = 2;
}

message QueryResults {
    repeated QueryRow rows = 1;
}

message QueryRow {
    repeated string values = 1;
}

message VoteRequest {
    uint64 from_id = 1;
    uint64 term = 2;
    uint64 last_log_index = 3;
    uint64 last_log_term = 4;
}

message VoteResponse {
    uint64 from_id = 1;
    uint64 term = 2;
    bool vote_granted = 3;
}

message AppendEntriesRequest {
    uint64 from_id = 1;
    uint64 term = 2;
    uint64 prev_log_index = 3;
    uint64 prev_log_term = 4;
    repeated LogEntry entries = 5;
    uint64 commit_index = 6;
}

message LogEntry {
    uint64 id = 1;
    string sql = 2;
    uint64 index = 3;
    uint64 term = 4;
}

message AppendEntriesResponse {
    uint64 from_id = 1;
    uint64 term = 2;
    bool success = 3;
    uint64 last_index = 4;
    oneof mismatch_index {
        uint64 mismatch_index_value = 5;
    }
}

message InstallSnapshotRequest {
        uint64 from_id = 1;
        uint64 term = 2;
        uint64 last_included_index = 3;
        uint64 last_included_term = 4;
        uint64 offset = 5;
        bytes data_sqlite = 6;
        bool done = 7;
}

message InstallSnapshotResponse {
        uint64 from_id = 1;
        uint64 term = 2;
        uint64 last_included_index = 3;
}

service RPC {
    rpc Execute(Query) returns (QueryResults);
    rpc Vote(VoteRequest) returns (Void);
    rpc RespondToVote(VoteResponse) returns (Void);
    rpc AppendEntries(AppendEntriesRequest) returns (Void);
    rpc RespondToAppendEntries(AppendEntriesResponse) returns (Void);
    rpc InstallSnapshot(InstallSnapshotRequest) returns (Void);
    rpc RespondToInstallSnapshot(InstallSnapshotResponse) returns (Void);
}
